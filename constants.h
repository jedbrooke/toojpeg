using uint8_t  = unsigned char;
using uint16_t = unsigned short;
using  int16_t =          short;
using  int32_t =          int; // at least four bytes
using uint32_t = unsigned int;

namespace constants
{
    // Conststants
    // quantization tables from JPEG Standard, Annex K
    const uint8_t DefaultQuantLuminance[8*8] =
        { 16, 11, 10, 16, 24, 40, 51, 61, // there are a few experts proposing slightly more efficient values,
        12, 12, 14, 19, 26, 58, 60, 55, // e.g. https://www.imagemagick.org/discourse-server/viewtopic.php?t=20333
        14, 13, 16, 24, 40, 57, 69, 56, // btw: Google's Guetzli project optimizes the quantization tables per image
        14, 17, 22, 29, 51, 87, 80, 62,
        18, 22, 37, 56, 68,109,103, 77,
        24, 35, 55, 64, 81,104,113, 92,
        49, 64, 78, 87,103,121,120,101,
        72, 92, 95, 98,112,100,103, 99 };
    const uint8_t DefaultQuantChrominance[8*8] =
        { 17, 18, 24, 47, 99, 99, 99, 99,
        18, 21, 26, 66, 99, 99, 99, 99,
        24, 26, 56, 99, 99, 99, 99, 99,
        47, 66, 99, 99, 99, 99, 99, 99,
        99, 99, 99, 99, 99, 99, 99, 99,
        99, 99, 99, 99, 99, 99, 99, 99,
        99, 99, 99, 99, 99, 99, 99, 99,
        99, 99, 99, 99, 99, 99, 99, 99 };

    const float dct_matrix[8*8] = {
        0.353553, 0.353553, 0.353553, 0.353553, 0.353553, 0.353553, 0.353553,0.353553,
        0.490393, 0.415735, 0.277785, 0.0975452, -0.0975452, -0.277785, -0.415735,-0.490393,
        0.46194, 0.191342, -0.191342, -0.46194, -0.46194, -0.191342, 0.191342,0.46194,
        0.415735, -0.0975452, -0.490393, -0.277785, 0.277785, 0.490393, 0.0975453,-0.415735,
        0.353553, -0.353553, -0.353553, 0.353553, 0.353553, -0.353553, -0.353553,0.353553,
        0.277785, -0.490393, 0.0975452, 0.415735, -0.415735, -0.0975451, 0.490393,-0.277785,
        0.191342, -0.46194, 0.46194, -0.191342, -0.191342, 0.46194, -0.46194,0.191342,
        0.0975452, -0.277785, 0.415735, -0.490393, 0.490393, -0.415735, 0.277785,-0.0975448
    };

    const float dct_matrix_transpose[8*8] = {
        0.353553, 0.490393, 0.46194, 0.415735, 0.353553, 0.277785, 0.191342,0.0975452,
        0.353553, 0.415735, 0.191342, -0.0975452, -0.353553, -0.490393, -0.46194,-0.277785,
        0.353553, 0.277785, -0.191342, -0.490393, -0.353553, 0.0975452, 0.46194,0.415735,
        0.353553, 0.0975452, -0.46194, -0.277785, 0.353553, 0.415735, -0.191342,-0.490393,
        0.353553, -0.0975452, -0.46194, 0.277785, 0.353553, -0.415735, -0.191342,0.490393,
        0.353553, -0.277785, -0.191342, 0.490393, -0.353553, -0.0975451, 0.46194,-0.415735,
        0.353553, -0.415735, 0.191342, 0.0975453, -0.353553, 0.490393, -0.46194,0.277785,
        0.353553, -0.490393, 0.46194, -0.415735, 0.353553, -0.277785, 0.191342,-0.0975448
    };

    const float dct_correction_matrix[8*8] = {
        8.00000, 11.09631, 7.52311, 9.40692, 6.19024, 6.28556, 2.81439, 2.20719,
        11.09631,       1,       1,       1,       1,       1,       1,       1,
        9.05127,        1,       1,       1,       1,       1,       1,       1,
        9.40699,        1,       1,       1,       1,       1,       1,       1,
        4.14146,        1,       1,       1,       1,       1,       1,       1,
        6.28555,        1,       1,       1,       1,       1,       1,       1,
        3.48541,        1,       1,       1,       1,       1,       1,       1,
        2.20719,        1,       1,       1,       1,       1,       1,       1
    };

    // 8x8 blocks are processed in zig-zag order
    // most encoders use a zig-zag "forward" table, I switched to its inverse for performance reasons
    // note: ZigZagInv[ZigZag[i]] = i
    const uint8_t ZigZagInv[8*8] =
    {  0, 1, 8,16, 9, 2, 3,10,   // ZigZag[] =  0, 1, 5, 6,14,15,27,28,
        17,24,32,25,18,11, 4, 5,   //             2, 4, 7,13,16,26,29,42,
        12,19,26,33,40,48,41,34,   //             3, 8,12,17,25,30,41,43,
        27,20,13, 6, 7,14,21,28,   //             9,11,18,24,31,40,44,53,
        35,42,49,56,57,50,43,36,   //            10,19,23,32,39,45,52,54,
        29,22,15,23,30,37,44,51,   //            20,22,33,38,46,51,55,60,
        58,59,52,45,38,31,39,46,   //            21,34,37,47,50,56,59,61,
        53,60,61,54,47,55,62,63 }; //            35,36,48,49,57,58,62,63

    const auto block_size = 8 * 8;
    const auto block_size_mem = block_size * sizeof(float);
}